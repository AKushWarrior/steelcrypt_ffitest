import 'dart:convert';
import 'dart:math';
import 'dart:typed_data';

import 'package:steel_crypt/steel_crypt.dart';
import 'dart:ffi';
import 'package:ffi/ffi.dart';

typedef nativeCbcPkcs7 = Pointer<Utf8> Function(Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>);
typedef localCbcPkcs7 = Pointer<Utf8> Function(Pointer<Utf8>, Pointer<Utf8>, Pointer<Utf8>);

// This benchmark tests a native implementation of AES-CBC-PKCS7 against
// steel_crypt's implementation. The length of data (in bytes) to be encrypted is
// generated by multiplying the last length by 3 (starting at 7). This pattern
// is designed to avoid creating situations where a minor cryptographic difference
// could significantly change the time to encrypt.
//
// To avoid the Dart compiler optimizing out unused functions, this benchmark
// assigns the values it generates through encryption/decryption to a List.
// This takes very little time; the tests have a control loop that measures
// how much time the test would take without encryption/decryption and
// subtracts it out of both results. 10000 iterations of the encryption are performed
// for each of: the control, the steel_crypt encrypt operation, and the native
// encrypt operation.
//
// This benchmark currently only works on linux. However, you are free to
// run cargo build in the sc_rust folder, and then change the value of the
// variable 'libpath' to reflect whatever platform you are working on.
void main(List<String> arguments) async {
  var libpath = './libscnative.so';
  var dl = DynamicLibrary.open(libpath);
  var encrypt_cbc_pkcs7 = dl.lookupFunction<nativeCbcPkcs7, localCbcPkcs7>('encrypt_cbc');
  var key = CryptKey().genFortuna();
  var iv = CryptKey().genDart();

  final Pointer<Utf8> keyRust = Utf8.toUtf8(key).cast();
  final Pointer<Utf8> ivRust = Utf8.toUtf8(iv).cast();

  final strs = List<String>(1);

  for (var length = 7; length < 50000; length *= 3) {
    print('');
    print('CBC-PKCS7 encrypt with length: $length');
    print('____');

    var data = latin1.decode(Uint8List.fromList(List.generate(length, (i) => Random().nextInt(255))));
    final Pointer<Utf8> dataRust = Utf8.toUtf8(data).cast();

    var sw = Stopwatch()..start();

    for (var i = 0; i<10000; i++) {
      strs[0] = '';
    }
    var control = sw.elapsedMilliseconds;

    sw..reset()..stop()..start();

    for (var i = 0; i<10000; i++) {
      strs[0] = Utf8.fromUtf8(encrypt_cbc_pkcs7(dataRust, keyRust, ivRust));
    }
    print('ffi encryption: ' + (sw.elapsedMilliseconds-control).toString() + ' ms');

    sw..reset()..stop()..start();

    for (var i = 0; i<10000; i++) {
      var crypt = AesCrypt(padding: PaddingAES.pkcs7, key: key);
      strs[0] = crypt.cbc.encrypt(inp: data, iv: iv);
    }
    print('dart encryption: ' + (sw.elapsedMilliseconds-control).toString() + ' ms');
    sw.stop();
  }

}
